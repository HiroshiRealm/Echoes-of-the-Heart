 I need your help to create a WebGL particle effect using the Three.js library. This effect will serve as a dynamic, dreamlike background for a game's 'ego space' interface.

Project Goal:
Generate a continuously flowing particle system with specific color aesthetics and movement, suitable for a serene and immersive atmosphere.

Key Requirements:

Technology:

WebGL implemented via Three.js.
Please provide the code within a single HTML file structure, including the Three.js library (either via CDN or embedded if that's your typical output, otherwise specify CDN usage).
Visual Appearance:

Particles: A system of many small, stardust-like particles (e.g., 5,000-10,000 particles, but make this configurable).
Colors: The particles should have a dreamlike color palette primarily composed of deep blues and purples.
Individual particles could have slight variations within this blue/purple spectrum.
Alternatively, the overall color field could subtly shift or pulse between these hues.
Consider using THREE.AdditiveBlending for the particle material to create a glowing, ethereal effect.
Size: Particles should be small. PointsMaterial size property can be used. sizeAttenuation should probably be true.
Particle Dynamics & Behavior:

Flowing Movement: Particles should exhibit a gentle, continuous flow. This could be:
A general drift in a consistent direction (e.g., diagonally across the screen, or from one side to another).
A more organic, swirling, or wave-like motion, perhaps subtly influenced by a Perlin or Simplex noise field to give it a more natural, less uniform flow.
Lifecycle/Recycling: When particles move out of the camera's view, they should be repositioned to re-enter from another side (or their starting area) to maintain a constant visual density and continuous animation.
Initial State: Particles should be randomly distributed within a 3D volume or 2D plane initially.
Three.js Implementation Details:

Scene Setup: Standard Three.js setup (Scene, PerspectiveCamera or OrthographicCamera, WebGLRenderer).
Particle System: Use THREE.Points for the particle system.
Geometry: Create a THREE.BufferGeometry and manually define position attributes. If colors are per-particle, also define a color attribute.
Material: Use THREE.PointsMaterial. Configure size, vertexColors (if using per-particle colors), blending (e.g., THREE.AdditiveBlending), transparent, and opacity.
Animation Loop: Update particle positions (and potentially other attributes like opacity or color) within the requestAnimationFrame loop.
Customization (Desirable):

It would be great if key parameters are easily adjustable at the beginning of the script, such as:
particleCount
baseColor1 (e.g., a deep blue)
baseColor2 (e.g., a purple)
particleSize
flowSpeed or parameters influencing the noise field.

Overall Aesthetic Goal:
The final effect should be mesmerizing, tranquil, and visually rich without being distracting. It's meant to evoke a sense of being within a vast, subconscious, dreamlike space.